name: Release Management

on:
  push:
    tags:
      - 'v*'

jobs:
  create-formatted-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Get previous tag
      id: get_previous
      run: |
        CURRENT_TAG="${{ github.ref_name }}"
        echo "Current tag: $CURRENT_TAG"

        git fetch --tags
        ALL_TAGS=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$')

        TAGS_ARRAY=($ALL_TAGS)
        for i in "${!TAGS_ARRAY[@]}"; do
          if [[ "${TAGS_ARRAY[$i]}" == "$CURRENT_TAG" ]]; then
            if [[ $i -lt $((${#TAGS_ARRAY[@]} - 1)) ]]; then
              PREVIOUS_TAG="${TAGS_ARRAY[$((i + 1))]}"
              echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
              echo "Found previous tag: $PREVIOUS_TAG"
              exit 0
            fi
          fi
        done

        echo "No previous tag found"
        echo "previous_tag=" >> $GITHUB_OUTPUT

    - name: Generate formatted release notes
      id: generate_notes
      run: |
        CURRENT_TAG="${{ github.ref_name }}"
        PREVIOUS_TAG="${{ steps.get_previous.outputs.previous_tag }}"

        if [ -n "$PREVIOUS_TAG" ]; then
          COMMITS=$(git log --pretty=format:"%s" "$PREVIOUS_TAG..$CURRENT_TAG")
        else
          COMMITS=$(git log --pretty=format:"%s" -20)
        fi

        declare -A categories=(
          ["FEATURES"]=""
          ["BUGFIXES"]=""
          ["MAINTENANCE"]=""
          ["DOCS"]=""
          ["BREAKING"]=""
          ["OTHER"]=""
        )

        while IFS= read -r commit; do
          CLEAN_MSG=$(echo "$commit" | sed -E 's/^(ft|feat|fix|ch|docs|breaking|refactor)[: ]*//i')

          case "${commit,,}" in
            ft:*|feat:*) categories["FEATURES"]+="- ${CLEAN_MSG}\n" ;;
            fix:*) categories["BUGFIXES"]+="- ${CLEAN_MSG}\n" ;;
            ch:*|refactor:*|chore:*) categories["MAINTENANCE"]+="- ${CLEAN_MSG}\n" ;;
            docs:*) categories["DOCS"]+="- ${CLEAN_MSG}\n" ;;
            breaking:*) categories["BREAKING"]+="- ${CLEAN_MSG}\n" ;;
            *) categories["OTHER"]+="- ${CLEAN_MSG}\n" ;;
          esac
        done <<< "$COMMITS"

        CONTENT="# Release $CURRENT_TAG\n\n"

        SECTIONS=(
          "🚀 What's New:FEATURES"
          "🐛 Bug Fixes:BUGFIXES"
          "🔧 Maintenance & Improvements:MAINTENANCE"
          "📚 Documentation:DOCS"
          "⚠️ Breaking Changes:BREAKING"
        )

        for section in "${SECTIONS[@]}"; do
          IFS=':' read -r title key <<< "$section"
          CONTENT+="## $title\n"
          if [ -n "${categories[$key]}" ]; then
            CONTENT+="${categories[$key]}\n"
          else
            CONTENT+="> No ${title,,} in this release\n\n"
          fi
        done

        if [ -n "${categories[OTHER]}" ]; then
          CONTENT+="## 🔄 Other Changes\n${categories[OTHER]}\n"
        fi

        CONTENT+="---\n*Automatically generated - please edit before publishing*"

        echo -e "$CONTENT" > formatted_notes.md
        echo "✅ Formatted release notes generated"

    - name: Create Draft Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: formatted_notes.md
        draft: true
        generate_release_notes: false
