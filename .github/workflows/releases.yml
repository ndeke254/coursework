name: Release Management
on:
  push:
    tags:
      - 'v*'

jobs:
  create-formatted-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get previous tag
      id: get_previous
      run: |
        CURRENT_TAG="${{ github.ref_name }}"
        echo "Current tag: $CURRENT_TAG"

        # Get all local tags (already available from checkout)
        ALL_TAGS=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' || echo "")
        echo "Available tags: $ALL_TAGS"

        if [ -n "$ALL_TAGS" ]; then
          TAGS_ARRAY=($ALL_TAGS)
          for i in "${!TAGS_ARRAY[@]}"; do
            if [[ "${TAGS_ARRAY[$i]}" == "$CURRENT_TAG" ]]; then
              if [[ $i -lt $((${#TAGS_ARRAY[@]} - 1)) ]]; then
                PREVIOUS_TAG="${TAGS_ARRAY[$((i + 1))]}"
                echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
                echo "Found previous tag: $PREVIOUS_TAG"
                exit 0
              fi
            fi
          done
        fi

        echo "No previous tag found"
        echo "previous_tag=" >> $GITHUB_OUTPUT

    - name: Generate formatted release notes
      id: generate_notes
      run: |
        CURRENT_TAG="${{ github.ref_name }}"
        PREVIOUS_TAG="${{ steps.get_previous.outputs.previous_tag }}"

        echo "Generating notes for tag: $CURRENT_TAG"
        echo "Previous tag: $PREVIOUS_TAG"

        # Get commits between tags
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Getting commits from $PREVIOUS_TAG to $CURRENT_TAG"
          COMMITS=$(git log --pretty=format:"%s" "$PREVIOUS_TAG..$CURRENT_TAG")
        else
          echo "No previous tag found, getting recent commits"
          COMMITS=$(git log --pretty=format:"%s" -20)
        fi

        # Initialize categories
        declare -A categories=(
          ["FEATURES"]=""
          ["BUGFIXES"]=""
          ["MAINTENANCE"]=""
          ["DOCS"]=""
          ["BREAKING"]=""
          ["OTHER"]=""
        )

        # Process commits
        while IFS= read -r commit; do
          [ -z "$commit" ] && continue

          # Clean the commit message
          CLEAN_MSG=$(echo "$commit" | sed -E 's/^(ft|feat|fix|ch|docs|breaking|refactor)[: ]*//i')

          # Categorize based on prefix
          case $(echo "$commit" | tr '[:upper:]' '[:lower:]') in
            ft:*|feat:*)
              categories["FEATURES"]+="- ${CLEAN_MSG}\n"
              ;;
            fix:*)
              categories["BUGFIXES"]+="- ${CLEAN_MSG}\n"
              ;;
            ch:*|refactor:*|chore:*)
              categories["MAINTENANCE"]+="- ${CLEAN_MSG}\n"
              ;;
            docs:*)
              categories["DOCS"]+="- ${CLEAN_MSG}\n"
              ;;
            breaking:*)
              categories["BREAKING"]+="- ${CLEAN_MSG}\n"
              ;;
            *)
              categories["OTHER"]+="- ${CLEAN_MSG}\n"
              ;;
          esac
        done <<< "$COMMITS"

        # Build the markdown content
        CONTENT="# Release $CURRENT_TAG\n\n"

        SECTIONS=(
          "🚀 What's New:FEATURES"
          "🐛 Bug Fixes:BUGFIXES"
          "🔧 Maintenance & Improvements:MAINTENANCE"
          "📚 Documentation:DOCS"
          "⚠️ Breaking Changes:BREAKING"
        )

        for section in "${SECTIONS[@]}"; do
          IFS=':' read -r title key <<< "$section"
          CONTENT+="## $title\n"
          if [ -n "${categories[$key]}" ]; then
            CONTENT+="${categories[$key]}\n"
          else
            CONTENT+="> No ${title,,} in this release\n\n"
          fi
        done

        if [ -n "${categories[OTHER]}" ]; then
          CONTENT+="## 🔄 Other Changes\n${categories[OTHER]}\n"
        fi

        CONTENT+="---\n*Automatically generated - please edit before publishing*"

        # Write to file
        echo -e "$CONTENT" > formatted_notes.md
        echo "✅ Formatted release notes generated"

    - name: Create Draft Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: formatted_notes.md
        draft: true
        generate_release_notes: false
